name: Tests

on:
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  CCACHE_DIR: ${{ github.workspace }}/ccache
  CCACHE_MAXSIZE: 500M
  CCACHE_KEY_SUFFIX: r2
  DEPENDENCY_TAG: v5

jobs:
  linux_ubuntu:
    runs-on: ubuntu-latest
    container: ghcr.io/acts-project/ubuntu2404:63
    env:
      INSTALL_DIR: ${{ github.workspace }}/install
      ACTS_LOG_FAILURE_THRESHOLD: WARNING

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          lfs: true

      - name: Set dependencies URL
        run: echo "DEPENDENCY_URL=https://acts.web.cern.ch/ACTS/ci/ubuntu-24.04/deps.${DEPENDENCY_TAG}.tar.zst" >> $GITHUB_ENV

      - name: Install dependencies
        run: acts/CI/dependencies.sh

      - name: Restore ccache
        uses: actions/cache/restore@v4
        id: ccache-restore
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os  }}-${{ github.job }}-${{ env.CCACHE_KEY_SUFFIX }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ runner.os  }}-${{ github.job }}-${{ env.CCACHE_KEY_SUFFIX }}-

      - name: Configure
        # setting CMAKE_CXX_STANDARD=20 is a workaround for a bug in the
        # dd4hep CMake configuration that gets triggered on recent CMake
        # versions
        # Need to set git user & email for patching to work (GeoModel plugin)
        run: >
          git config --global user.name 'CI' &&
          git config --global user.email '<>' &&
          ccache -z &&
          cd acts && git submodule update --init && cd .. &&
          cmake -B build -S .
          --preset=github-ci
          -DCMAKE_INSTALL_PREFIX="${INSTALL_DIR}"
          -DPython_EXECUTABLE=$(which python3)

      - name: Build
        run: cmake --build build

      - name: ccache stats
        run: ccache -s

      - name: Save ccache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: ${{ github.workspace }}/ccache
          key: ${{ steps.ccache-restore.outputs.cache-primary-key }}

      - name: Install
        run: cmake --build build --target install

      - name: Package install
        run: tar czf install.tar.gz -C ${INSTALL_DIR} .

      - uses: actions/upload-artifact@v4
        with:
          name: acts-linux-ubuntu
          path: install.tar.gz

  linux_hello_world:
    runs-on: ubuntu-latest
    container: ghcr.io/acts-project/ubuntu2404:63
    needs: [linux_ubuntu]
    env:
      ACTS_SEQUENCER_DISABLE_FPEMON: true

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          lfs: true

      - name: Set dependencies URL
        run: echo "DEPENDENCY_URL=https://acts.web.cern.ch/ACTS/ci/ubuntu-24.04/deps.${DEPENDENCY_TAG}.tar.zst" >> $GITHUB_ENV

      - name: Install dependencies
        run: acts/CI/dependencies.sh

      - uses: actions/download-artifact@v4
        with:
          name: acts-linux-ubuntu

      - name: Unpack install tarball
        run: mkdir install && tar xf install.tar.gz -C install

      - name: Run ACTS hello world
        run: >
          install/bin/ActsExampleHelloWorld

  linux_geomodel_tests:
    runs-on: ubuntu-latest
    container: ghcr.io/acts-project/ubuntu2404:63
    needs: [linux_ubuntu]
    env:
      ACTS_SEQUENCER_DISABLE_FPEMON: true

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          lfs: true

      - name: Set dependencies URL
        run: echo "DEPENDENCY_URL=https://acts.web.cern.ch/ACTS/ci/ubuntu-24.04/deps.${DEPENDENCY_TAG}.tar.zst" >> $GITHUB_ENV

      - name: Install dependencies
        run: acts/CI/dependencies.sh

      - uses: actions/download-artifact@v4
        with:
          name: acts-linux-ubuntu

      - name: Unpack install tarball
        run: mkdir install && tar xf install.tar.gz -C install

      - name: Install python dependencies
        run: >
          python3 -m pip install -r acts-validation/requirements.txt

      - name: Run GeoModel building and SVG plotting
        run: >
          source install/bin/this_acts.sh &&
          source install/python/setup.sh &&
          cd acts-validation && source setup.sh && cd .. &&
          mkdir run &&
          cd run &&
          python3 ../acts-validation/scripts/geometry_plot_svg.py --geo-mode=gen2  -i ../data/ITk_SQLite_acts.db -q ITk --top-node ITk --eta-main-lines 0 1 2 3 4 --eta-r-max 1200 --eta-z-max 3600 &&
          cd ..
        shell: bash

      - name: Run Geant4 material recording
        run: >
            source install/bin/this_acts.sh &&
            source install/python/setup.sh &&
            cd acts-validation && source setup.sh && cd .. &&
            cd run &&
            python3 ../acts-validation/scripts/material_recording.py -t1000 -n1000 -i ../data/ITk_SQLite_acts.db &&
            cd ..
        shell: bash
